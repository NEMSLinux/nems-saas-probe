#!/usr/bin/env python3

### NEMS SaaS Communications Agent
#   By Robbie Ferguson
#   https://nemslinux.com/
##################################

ver="1.0.051"

### Go ahead with the program

## Imports
import os, sys, psutil, platform, socket, json, logging, configparser, requests, uuid, argparse
from time import sleep
from pathlib import Path

# NVIDIA
# import nvidia_smi # Requires nvidia-ml-py3
# import GPUtil

# Certificates
import certifi

## End of Imports

# Setup an empty payload
bulkPayload = {}

### Grab the command line arguments prvided by the user
parser = argparse.ArgumentParser()
parser.add_argument(
    "--loglevel",
    default="info",
    help=(
        "Specify the logging level to output (and higher) to both console and log file. Example '--loglevel debug', Default: 'info', Options: debug info warning error critical"),
)
parser.add_argument(
    "--version",
    action="version",
    version="NEMS SaaS Probe v" + ver,
    help=(
        "Display probe version, formatted as plain text."),
)
parser.add_argument(
    "--vernum",
    action="version",
    version=ver,
    help=("Display probe version, formatted as float.")
)

startServer=True
class noServer(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
      global startServer
      startServer=False

parser.add_argument('--noserver', action=noServer, default=False, help=("Disable the built-in web server."), nargs=0)

options = parser.parse_args()
levels = {
    'critical': logging.CRITICAL,
    'error': logging.ERROR,
    'warn': logging.WARNING,
    'warning': logging.WARNING,
    'info': logging.INFO,
    'debug': logging.DEBUG
}
level = levels.get(options.loglevel.lower())
if level is None:
    raise ValueError(
        f"log level given: {options.loglevel}"
        f" -- must be one of: {' | '.join(levels.keys())}")

data = {}
data['ver'] = ver

### Do some OS-specific stuff
if os.name == "nt":
  # Check the original path in case this is an early-adopter who has the config in the old path
  configfilePath = os.path.expandvars("%systemdrive%\\etc\\nems-saas.ini")
  configPath = Path(configfilePath)
  if configPath.is_file():
    configfileLoc = configfilePath
    logPath = os.path.expandvars("%systemdrive%\\etc\\")
  else:
    # Use the modern location
    configFolder = os.path.expandvars("%programdata%\\NEMS SaaS\\")
    if not os.path.exists(configFolder):
      os.makedirs(configFolder)
    configfileLoc = os.path.expandvars("%programdata%\\NEMS SaaS\\nems-saas.ini")
    logPath = configFolder
else:
  # This is not Windows (likely Linux or macOS)
  configfileLoc = "/etc/nems-saas.ini"
  logPath = "/var/log/"

### Configure logging
formatter = logging.Formatter("%(asctime)s [%(levelname)-5.5s] %(message)s")
logging.getLogger('').setLevel(level)
fh = logging.FileHandler(logPath + "nems-saas.log")
fh.setLevel(level)
fh.setFormatter(formatter)
logging.getLogger('').addHandler(fh)

formatter = logging.Formatter('%(message)s')
ch = logging.StreamHandler()
ch.setLevel(level)
ch.setFormatter(formatter)
logging.getLogger('').addHandler(ch)

logging.info("NEMS SaaS Probe v" + ver + " loaded.")

logging.debug("Using configuration file located at " + configfileLoc)
logging.debug("Log file located at " + logPath + "nems-saas.log")

### Setup Account Info
def read_config():
  config = configparser.ConfigParser()
  config.read(configfileLoc)
  return config

api = None
message = None
while api is None:
  try:
    config = read_config()
    key = config["nems-saas"]["key"]
    api = "https://api-saas.nemslinux.com/receive/" + key
  except:
    while message is None:
      message = "nems-saas-config is not installed. Please install it now."
      logging.warning(message)
    sleep(60)

### Load the device's HWID, or create a new one if it doesn't exist
try:
  data["hwid"] = config["nems-saas"]["hwid"]
except:
  config.set('nems-saas','hwid',str(uuid.uuid4()))
  with open(configfileLoc, 'w') as configfile:
    config.write(configfile)
    data["hwid"] = config["nems-saas"]["hwid"]


# Web server
if startServer == False:
  logging.info("Web server disabled by CLI argument.")
else:
  PORT = 6367
  import http.server
  from http import HTTPStatus
  import threading
  from urllib.parse import urlparse, parse_qs

  class Handler(http.server.BaseHTTPRequestHandler):
    protocol_version = 'HTTP/1.0'

    def do_GET(self):
        output = "NEMS SaaS Probe v" + ver
        self.send_header('Content-Length', str(len(output)))
        self.send_header('Content-type','text/html')
        self.send_response(HTTPStatus.FORBIDDEN)
        self.end_headers()
        self.wfile.write(output.encode())

    def do_POST(self):
        if hasattr(self.headers, 'getheader'):
           length = int(self.headers.getheader('content-length'))
        else:
           length = int(self.headers.get('content-length'))

        self.send_header('Content-type','application/json')
        postData = self.rfile.read(length).decode("utf8")

        if postData == key:
          self.send_response(HTTPStatus.OK)
          output = json.dumps(bulkPayload)
        else:
          self.send_response(HTTPStatus.FORBIDDEN)
          output = "NEMS SaaS Probe v" + ver

        self.send_header('Content-Length', str(len(output)))

        self.end_headers()
        self.wfile.write(output.encode())

    def log_message(self, format, *args):
        logging.info("%s - - [%s] %s" %
                            (self.client_address[0],
                             self.log_date_time_string(),
                             format%args))
  def start_server():
    logging.info("Starting json server server on port " + str(PORT))
    server_address = ("", PORT)
    httpd = http.server.HTTPServer(server_address, Handler);
    thread = threading.Thread(target=httpd.serve_forever);
    thread.start();


data['hostname'] = socket.gethostname()

def get_size(bytes, suffix="B"):
  """
  Scale bytes to its proper format
  e.g:
      1253656 => '1.20MB'
      1253656678 => '1.17GB'
  """
  factor = 1024
  for unit in ["", "K", "M", "G", "T", "P"]:
    if bytes < factor:
      return f"{bytes:.2f}{unit}{suffix}"
  bytes /= factor

def getSystemInfo():
  try:
    ### Operating System
    def linux_distribution():
      try:
        return platform.linux_distribution()
      except:
        return ""

    data["os"] = {}
    data["os"]["platform"] = platform.system()
    data["os"]["architecture"] = platform.architecture()
    data["os"]["release"] = platform.release()
    data["os"]["version"] = platform.version()
    data["os"]["machine"] = platform.machine()
    data["os"]["mac_ver"] = platform.mac_ver()

    ### Load Average
    #load1, load5, load15 = os.getloadavg()
    load1, load5, load15 = psutil.getloadavg()
    data["cpu"] = {}
    data["cpu"]["cores"] = {"physical": psutil.cpu_count(logical=False),"total": psutil.cpu_count(logical=True)}
    cpufreq = psutil.cpu_freq()
    data["cpu"]["frequency"] = {"min": cpufreq.min,"max": cpufreq.max,"current": cpufreq.current}
    data["cpu"]["load"] = {}
    data["cpu"]["load"][1] = load1
    data["cpu"]["load"][5] = load5
    data["cpu"]["load"][15] = load15
    data["cpu"]["usage"] = {}
    data["cpu"]["usage"]["total"] = psutil.cpu_percent(percpu=False, interval=1)
    data["cpu"]["usage"]["cores"] = {}
    for i, percentage in enumerate(psutil.cpu_percent(percpu=True, interval=1)):
      data["cpu"]["usage"]["cores"][i] = percentage

    ### Battery (for laptops, tablets, etc.)
    battery = psutil.sensors_battery()
    if battery:
      data["battery"] = {}
      data["battery"]["pluggedin"] = battery.power_plugged
      data["battery"]["percentage"] = battery.percent
      data["battery"]["timeleft"] = battery.secsleft

    ### Disk Usage
    disks = psutil.disk_partitions(all=False)

    data["disks"] = {}
    for x in disks:
      if sys.getsizeof(data["disks"]) < 50000:
        # Partition Information
        data["disks"][x.mountpoint] = {}
        data["disks"][x.mountpoint]["device"] = {"disk": x.device,"mountpoint": x.mountpoint}

        # inodes
        if os.name != "nt":
          st = os.statvfs(x.mountpoint)
#        free = (st.f_bavail * st.f_frsize) / 1024
#        total = (st.f_blocks * st.f_frsize) / 1024
#        used  = ((st.f_blocks - st.f_bfree) * st.f_frsize) / 1024
          data["disks"][x.mountpoint]["inodes"] = {}
          data["disks"][x.mountpoint]["inodes"]["total"] = st.f_files
          data["disks"][x.mountpoint]["inodes"]["free"] = st.f_ffree

        # Disk Usage
        try:
          du = psutil.disk_usage(x.mountpoint)
          # Ensure the disks packet doesn't exceed the limits (as might be the case if a user tried to probe a thousand hard drive Chia farm)
          # Removal of this check would result in the entire packet being rejected by NEMS SaaS if this size is exceeded
          data["disks"][x.mountpoint]["usage"] = {}
          data["disks"][x.mountpoint]["usage"] = {"total": du.total,"used": du.used,"free": du.free,"percent":du.percent}
          data["disks"][x.mountpoint]["offline"] = 0
        except:
          data["disks"][x.mountpoint]["offline"] = 1

      else:
        logging.error("Storage device at " + x.mountpoint + " cannot be included in packet. Disk data exceeds packet size limitations.")


    ### Memory
    mem = psutil.virtual_memory()
    data["memory"] = {}
    data["memory"] = {"total": mem.total,"available": mem.available,"percent": mem.percent}

    ### Network
    data["network"] = {}

    # IO statistics since boot
    net_io = psutil.net_io_counters()
    data["network"]["packets"] = {"sent": net_io.bytes_sent, "received": net_io.bytes_recv}

    # NICs
    if_addrs = psutil.net_if_addrs()
    for interface_name, interface_addresses in if_addrs.items():
      data["network"][interface_name] = {}
      for address in interface_addresses:
        if str(address.family) == 'AddressFamily.AF_INET':
          data["network"][interface_name] = {"ip": address.address,"netmask": address.netmask,"broadcast": address.broadcast}
        elif str(address.family) == 'AddressFamily.AF_PACKET':
          data["network"][interface_name]["mac"] = address.address

    # Uptime - Unix timestamp of last reboot
    data["bootstamp"] = int(psutil.boot_time())

    # Logged-in user
    data["username"] = os.getlogin()
# Alternate may be better - uses psutil to find all logged in users
# Switch to this if os.getlogin shows the probe running user (root) rather than actual logged in user
#    def user_name():
#      arr = []
#      for user in psutil.users():
#        if str(user[0]) != 'None' and user[0] not in arr:
#          arr.append(user[0])
#      return arr
#    users = user_name()
#    data["username"] = users[0]

    # GPUs
    ## NVIDIA
#    try:
#      data["gpu"] = {}
#      GPUs = GPUtil.getGPUs()
#      data["gpu"]["load"] = round(float(GPUs[0].load*100),2)
#      data["gpu"]["memory"] = round(float(GPUs[0].memoryUtil*100),2)
#    except:
#      data["gpu"] = {}



    #return json.dumps(data, sort_keys=False, indent=4)
    return data

  except Exception as e:
    logging.exception(e)

if startServer == True:
  start_server()

while True:
  try:
    # Obtain the current location of certificates
    os.environ['REQUESTS_CA_BUNDLE']=os.path.join(os.path.dirname(sys.argv[0]), certifi.where())

    # Sending the payload as a POST packet over SSL connection
    bulkPayload = getSystemInfo()
    payload = {"json": json.dumps(bulkPayload)}
    headers = {'content-type': 'application/x-www-form-urlencoded', 'Accept-Charset': 'UTF-8'}
    response = requests.post(api, data=payload, headers=headers, timeout=240, verify=True)
    # Sleep if successfully sent payload
    # The sleep time is determined by the remote API, which allows the central server to control throttling
    if response.ok == True:
      # Send a packet based on the sleep timer. This helps scatter requests to reduce the impact on the performance of our SaaS server.
      if (response.text.isnumeric()):
        timer = int(response.text)
        logging.info("Packet sent.")
        bulkPayload["packet"] = 1
        bulkPayload["timer"] = timer
        if timer == 10000:
          logging.error("Invalid account key.")
          bulkPayload["packet"] = 0
        elif timer == 10001:
          logging.error("Invalid HWID.")
          bulkPayload["packet"] = 0
        else:
          logging.info("Sleeping for " + str(timer) + " seconds.")
      else:
        # Probably a failed connection / Internet issue
        # Could be a payload issue
        # Response was not numeric
        logging.error("Invalid response from API: " + response.text)
        bulkPayload["packet"] = 0
        timer = 60
      sleep(timer)
    # Retry every 30 seconds if failed to send payload
    else:
      logging.warning("Packet failed: " + response.reason + ". Will try again.")
      bulkPayload["packet"] = 0
      sleep(30)
  except requests.ConnectionError:
    logging.warning("Could not connect to NEMS SaaS API. Will try again later.")
    bulkPayload["packet"] = 0
  except KeyboardInterrupt: # Catch CTRL-C during loop
    print()
    sys.exit("Exiting.")
